function decode(input) {
  const map1 = new Map();
  var sentence = "";

  map1.set("0000001011", "a");
  map1.set("0011101010", "b");
  map1.set("0011101110", "c");
  map1.set("0000111010", "d");
  map1.set("0000000010", "e");
  map1.set("0010101110", "f");
  map1.set("0000111110", "g");
  map1.set("0010101010", "h");
  map1.set("0000001010", "i");
  map1.set("0010111111", "j");
  map1.set("0000111011", "k");
  map1.set("0010111010", "l");
  map1.set("0000001111", "m");
  map1.set("0000001110", "n");
  map1.set("0000111111", "o");
  map1.set("0010111110", "p");
  map1.set("0011111011", "q");
  map1.set("0000101110", "r");
  map1.set("0000101010", "s");
  map1.set("0000000011", "t");
  map1.set("0000101011", "u");
  map1.set("0010101011", "v");
  map1.set("0000101111", "w");
  map1.set("0011101011", "x");

  map1.set("0011101111", "y");
  map1.set("0011111010", "z");

  map1.set("1111111111", "0");
  map1.set("1011111111", "1");
  map1.set("1010111111", "2");
  map1.set("1010101111", "3");
  map1.set("1010101011", "4");
  map1.set("1010101010", "5");
  map1.set("1110101010", "6");
  map1.set("1111101010", "7");
  map1.set("1111111010", "8");
  map1.set("1111111110", "9");
  map1.set("**********", " ");
  str_length = input.length / 10;
  for (let i = 0; i < str_length; i++) {
    let start = i * 10;
    let finish = i * 10 + 10;
    var word = input.slice(start, finish);
    sentence = sentence + map1.get(word);
  }
  return sentence;
}
// const expr =
//   "000000001100101010100000000010**********00111110110000101011000000101000111011100000111011**********00111010100000101110000011111100001011110000001110**********001010111000001111110011101011**********00101111110000101011000000111100101111100000101010**********0000111111001010101100000000100000101110**********000000001100101010100000000010**********0010111010000000101100111110100011101111**********000011101000001111110000111110";
// const result = "the quick brown fox jumps over the lazy dog";
// console.log(morse_decoder(expr));
module.exports = {
  decode,
};
